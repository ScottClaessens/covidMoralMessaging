pol <- polychoric(d)
fit <- principal(pol$rho, nfactors = 10)
plot(fit$values, type = "b")
abline(h = 1)
fit2 <- principal(pol$rho, nfactors = 5)
loadings(fit2)
fit3 <- principal(pol$rho, nfactors = 5, rotate = "varimax")
loadings(fit3)
d <- data.frame(y = rnorm(1000, 0, 1))
library(brms)
fit <- brm(y ~ 1, d)
library(tictoc)
tic("waic"); fit <- add_criterion(fit, "waic"); toc()
tic("loo"); fit <- add_criterion(fit, "loo"); toc()
d <- data.frame(y = rnorm(10000, 0, 1))
fit <- brm(y ~ 1, d)
tic("waic"); fit <- add_criterion(fit, "waic"); toc()
tic("loo"); fit <- add_criterion(fit, "loo"); toc()
help(pdf)
getwd()
d <- data.frame(y = rnorm(1000, 0, 1))
d$x1 <- rnorm(1000, d$y, 2)
d$x2 <- rnorm(1000, d$y, 2)
d$x3 <- rnorm(1000, d$y, 2)
library(lavaan)
model <- "Y =~ x1 + x2 + x3"
fit <- cfa(model, data = d)
summary(fit)
d$Y <- predict(fit)
help("predict,lavaan-method")
lavaan::lavPredict()
help(lavPredict)
d$Y <- NULL
d <- cbind(d, predict(fit, se = "standard"))
d <- cbind(d, lavPredict(fit, se = "standard"))
head(d)
plot(d$y, d$Y)
lavPredict(fit, se = "standard")
summary(fit)
d$group <- rep(1:4, each = 250)
fit <- cfa(model, data = d, group = "group")
summary(fit)
help("summary,lavaan-method")
help("summary,lavaanList-method")
model
model <- "Y =~ x1 + x2 + x3
x1 ~ 1
Y ~  c(int_1, int_2, int_3, int_4)*1"
fit <- cfa(model, data = d, group = "group")
model <- "Y =~ x1 + x2 + x3
x1 ~ 0*1
Y ~  c(int_1, int_2, int_3, int_4)*1"
fit <- cfa(model, data = d, group = "group")
summary(fit)
model <- "Y =~ x1 + x2 + x3"
fit <- cfa(model, data = d, group = "group")
summary(fit)
fit <- cfa(model, data = d, group = "group")
summary(fit)
model <- "Y =~ x1 + x2 + x3
x1 ~ 1*0
Y ~ c(int1, int2, int3, int4)*1
diff12 := int1 - int2
diff13 := int1 - int3
diff14 := int1 - int4
diff23 := int2 - int3
diff24 := int2 - int4
diff34 := int3 - int4"
fit <- cfa(model, data = d, group = "group")
summary(fit)
d$x1 <- d$x1 + (d$group/10)
d$x2 <- d$x2 + (d$group/10)
d$x3 <- d$x3 + (d$group/10)
fit <- cfa(model, data = d, group = "group")
summary(fit)
d <- data.frame(y = rnorm(1000, 0, 1))
d$x1 <- rnorm(1000, d$y, 1)
d$x2 <- rnorm(1000, d$y, 1)
d$x3 <- rnorm(1000, d$y, 1)
model <- "Y =~ x1 + x2 + x3"
library(lavaan)
fit <- cfa(model, d)
summary(fit)
lavaan::getCov(fit)
fitted(fit)
x <- rep(c(1,2,3), each = 100)
y <- rnorm(100, x, 1)
g <- rep(1:10, each = 10)
y <- rnorm(100, y + g, 0.5)
d <- data.frame(y = y, x = factor(x), g = factor(g))
library(lme4)
m1 <- lmer(y ~ x + (1 | g))
m1 <- lmer(y ~ x + (1 | g), data = d)
help(relevel)
d$x <- relevel(d$x, "3")
m2 <- lmer(y ~ x + (1 | g), data = d)
anova(m1, m2)
d$z <- rnorm(300, 0, 3)
m2 <- lmer(y ~ x*z + (1 | g), data = d)
d$x <- relevel(d$x, "1")
m1 <- lmer(y ~ x*z + (1 | g), data = d)
summary(m1)
summary(m2)
0.003867 + 0.015151
N <- 200
latentA <- rnorm(N)
latentS <- rnorm(N)
help(rnorm)
latentAn <- latentA + rnorm(N, 0.5, 1)
latentAf <- latentA + rnorm(N, -0.5, 1)
latentSn <- latentS + rnorm(N, 0.5, 1)
latentSf <- latentS + rnorm(N, -0.5, 1)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Sf_item1
# data
d <- data.frame(
An_item1 = An_item1,
An_item2 = An_item2,
An_item3 = An_item3,
An_item4 = An_item4,
An_item5 = An_item5,
An_item6 = An_item6,
Af_item1 = Af_item1,
Af_item2 = Af_item2,
Af_item3 = Af_item3,
Af_item4 = Af_item4,
Af_item5 = Af_item5,
Af_item6 = Af_item6,
Sn_item1 = Sn_item1,
Sn_item2 = Sn_item2,
Sn_item3 = Sn_item3,
Sn_item4 = Sn_item4,
Sn_item5 = Sn_item5,
Sn_item6 = Sn_item6,
Sf_item1 = Sf_item1,
Sf_item2 = Sf_item2,
Sf_item3 = Sf_item3,
Sf_item4 = Sf_item4,
Sf_item5 = Sf_item5,
Sf_item6 = Sf_item6
)
source('~/.active-rstudio-document', echo=TRUE)
# run hierarchical model
library(lavaan)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
6*4
summary(fit)
parameterTable(fit)
nrow(parameterTable(fit))
24*4
View(parameterTable(fit))
96 + 24
96 + 24 + 24
96 + 24 + 24 + 4
96 + 24 + 24 + 4 + 6
findInterval()
help(findInterval)
source('~/.active-rstudio-document', echo=TRUE)
head(d)
unique(d$An_item1)
hist(d$An_item1)
hist(d$An_item2)
hist(d$An_item3)
hist(d$An_item4)
hist(d$An_item5)
hist(d$An_item6)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
parameterTable(fit)
View(parameterTable(fit))
source('~/.active-rstudio-document', echo=TRUE)
d$An_item1
hist(d$An_item1)
hist(d$An_item2)
hist(d$An_item3)
hist(d$An_item4)
source('~/.active-rstudio-document', echo=TRUE)
View(parameterTable(fit))
82 + 24
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(d$An_item1)
hist(d$An_item2)
hist(d$An_item3)
hist(d$An_item4)
hist(d$An_item5)
hist(d$An_item6)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(d$An_item1)
hist(d$An_item2)
hist(d$An_item3)
hist(d$An_item4)
hist(d$An_item5)
hist(d$An_item6)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
View(parameterTable(fit))
devtools::install_github("paul-buerkner/brms")
devtools::install_github("paul-buerkner/brms")
install.packages("devtools")
devtools::install_github("paul-buerkner/brms")
install.packages("Rcpp")
devtools::install_github("paul-buerkner/brms")
devtools::install_github("paul-buerkner/brms")
remove.packages("brms")
devtools::install_github("paul-buerkner/brms")
remove.packages("brms")
devtools::install_github("paul-buerkner/brms")
install.packages("brms")
remotes::install_github("paul-buerkner/brms")
devtools::install_dev("remotes")
remotes::install_github("paul-buerkner/brms")
remove.packages("rstan")
install.packages("rstan")
remotes::install_github("paul-buerkner/brms")
library(remotes)
library(devtools)
help(install_github)
remotes::install_github("paul-buerkner/brms", force = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remove.packages("digest")
library(digest)
install.packages("digest")
install.packages("digest")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.packages("digest")
install.packages("digest")
remove.packages("digest")
install.packages("digest")
install.packages("digest")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remove.packages("yaml")
install.packages("yaml")
install.packages("yaml")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.packages("curl")
install.packages("curl")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remove.packages("brms")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
library(brms)
install.packages("brms")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.packages("ps")
install.packages("ps")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms")
getwd()
install.packages("~/brms-master.7z", repos = NULL)
install.packages("~/brms-master.zip", repos = NULL, type = "win.binary")
library(brms)
install.packages("~/brms-master.zip", repos = NULL, type = "win.binary")
library(brms)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.packages("rstan")
install.packages("rstan")
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.package("ps", dependencies = TRUE)
install.packages("ps", dependencies = TRUE)
install.packages("ps", dependencies = TRUE)
remotes::install_github("paul-buerkner/brms", dependencies = TRUE)
install.packages("tidyverse")
install.packages("brms")
remotes::install_github("paul-buerkner/brms")
library("brms", lib.loc="~/R/R-3.6.1/library")
remove.packages("brms", lib="~/R/R-3.6.1/library")
remotes::install_github("paul-buerkner/brms")
install.packages("rstan")
install.packages("rstan")
help("install.packages")
install.packages("rstan", type = "source")
library(rstan)
version
rstan
sessionInfo()
remotes::install_github("paul-buerkner/brms")
help(install_github)
remotes::install_github("paul-buerkner/brms", type = "binary")
devtools::install_github("r-lib/devtools")
devtools::install_github("paul-buerkner/brms")
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("paul-buerkner/brms")
install.packages("rstan")
devtools::install_github("paul-buerkner/brms")
devtools::install_github("paul-buerkner/brms", dependencies = TRUE)
growth <- replicate( 10000 , prod( runif(100, 0, Inf) ) )
dens( growth , norm.comp=TRUE )
warnings()
growth <- replicate( 10000 , prod( 1 + abs(runif(12,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
library(rethinking)
growth <- replicate( 10000 , prod( 1 + abs(runif(12,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(12,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(1000,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(1000,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(100,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(100,0,0.5)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(100,0,02)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(abs(runif(1000,0,02)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(1 + abs(runif(1000,0,2)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(1 + abs(runif(1000,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(1 + abs(runif(10,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
growth <- replicate( 10000 , prod(1 + abs(runif(10,0,0.1)) ) )
dens( growth , norm.comp=TRUE )
rlnorm
rlnorm()
M <- rnorm(1000, X, 3)
# latent variables
X <- rnorm(1000, 0, 3)
M <- rnorm(1000, X, 3)
Y <- rnorm(1000, M, 3)
cor(X, Y)
cor(X, M)
cor(Y, M)
X <- rnorm(1000, 0, 4)
M <- rnorm(1000, X, 4)
Y <- rnorm(1000, M, 4)
cor(X, Y)
cor(X, M)
cor(Y, M)
X <- rnorm(1000, 0, 10)
M <- rnorm(1000, X, 10)
Y <- rnorm(1000, M, 10)
cor(X, M)
cor(M, Y)
cor(X, Y)
X <- rnorm(1000, 0, 100)
M <- rnorm(1000, X, 100)
Y <- rnorm(1000, M, 100)
cor(X, M)
X <- rnorm(1000, 0, 1)
M <- rnorm(1000, X, 2)
Y <- rnorm(1000, M, 3)
cor(X, M)
cor(M, Y)
cor(X, Y)
X <- rnorm(1000, 0, 1)
M <- rnorm(1000, X, 3)
Y <- rnorm(1000, M, 5)
cor(X, M)
cor(M, Y)
cor(X, Y)
n <- 1000
# latent variables
X <- rnorm(n, 0, 1)
M <- rnorm(n, X, 3)
Y <- rnorm(n, M, 5)
# measurements
x1 <- X + rnorm(n, 0, 2)
x2 <- X + rnorm(n, 0, 2)
x3 <- X + rnorm(n, 0, 2)
x4 <- X + rnorm(n, 0, 2)
cor(x1, x2)
cor(x1, X)
n <- 1000
# latent variables
X <- rnorm(n, 0, 1)
M <- rnorm(n, X, 3)
Y <- rnorm(n, M, 5)
# measurements
x1 <- X + rnorm(n, 0, 1)
x2 <- X + rnorm(n, 0, 1)
x3 <- X + rnorm(n, 0, 1)
x4 <- X + rnorm(n, 0, 1)
n <- 1000
# latent variables
X <- rnorm(n, 0, 1)
M <- rnorm(n, X, 3)
Y <- rnorm(n, M, 5)
# measurements
x1 <- X + rnorm(n, 0, 0.5)
x2 <- X + rnorm(n, 0, 0.5)
x3 <- X + rnorm(n, 0, 0.5)
x4 <- X + rnorm(n, 0, 0.5)
cor(x1, X)
n <- 1000
# latent variables
X <- rnorm(n, 0, 1)
M <- rnorm(n, X, 3)
Y <- rnorm(n, M, 5)
# measurements
x1 <- X + rnorm(n, 0, 0.5)
x2 <- X + rnorm(n, 0, 0.5)
x3 <- X + rnorm(n, 0, 0.5)
x4 <- X + rnorm(n, 0, 0.5)
m1 <- M + rnorm(n, 0, 0.5)
m2 <- M + rnorm(n, 0, 0.5)
m3 <- M + rnorm(n, 0, 0.5)
m4 <- M + rnorm(n, 0, 0.5)
y1 <- Y + rnorm(n, 0, 0.5)
y2 <- Y + rnorm(n, 0, 0.5)
y3 <- Y + rnorm(n, 0, 0.5)
y4 <- Y + rnorm(n, 0, 0.5)
# data frame
d <- data.frame(X = X, M = M, Y = Y,
x1 = x1, x2 = x2, x3 = x3, x4 = x4,
m1 = m1, m2 = m2, m3 = m3, m4 = m4,
y1 = y1, y2 = y2, y3 = y3, y4 = y4)
# show masking effect with lm()
summary(lm(M ~ X, d))
summary(lm(Y ~ M, d))
summary(lm(Y ~ X, d))
summary(lm(Y ~ X + M, d))
# does lavaan pick this up with covariances?
model <- "x =~ x1 + x2 + x3 + x4
y =~ y1 + y2 + y3 + y4
m =~ m1 + m2 + m3 + m4"
library(lavaan)
fit <- cfa(model, d)
summary(fit)
model <- "x =~ x1 + x2 + x3 + x4
y =~ y1 + y2 + y3 + y4
m =~ m1 + m2 + m3 + m4
y ~ x + m"
fit2 <- sem(model, d)
summary(fit2)
install.packages("bookdown")
library(brms)
inv_logit_scaled(rnorm(1000, 0, 4))
hist(inv_logit_scaled(rnorm(1000, 0, 4)))
d <- data.frame(y = sample(100, 1:7))
d <- data.frame(y = sample(1:7, 100))
d <- data.frame(y = sample(1:7, 100, replace = T))
library(brms)
get_prior(y ~ 1, data = d, family = cumulative)
d$x <- rep(0:1, each = 50)
get_prior(y ~ x, data = d, family = cumulative)
b <- brm(y ~ x, data = d, family = cumulative, sample_prior = "only")
b <- brm(y ~ x, data = d, family = cumulative, sample_prior = "only",
prior = prior(normal(0.5, 1), class = b))
b
predict(b)
predict(newdata = T)
predict(b, newdata = T)
help("predict.brmsfit")
dNull <- data.frame(x = rep(NA, 100), y = rep(NA, 100))
predict(b, newdata = dNull)
library(ordinal)
rm(dNull)
library(rethinking)
help(rordlogit)
post <- posterior_samples(b)
rordlogit(4000, phi = 0, a = post[,1:6])
rordlogit(4000, phi = 0, a = post[1,1:6])
rordlogit(1, phi = 0, a = post[1,1:6])
library(tidyverse)
post <- post %>% summarise_all(median)
post
rordlogit(1, phi = 0, a = post[1:6])
rordlogit(100, phi = 0, a = post[1:6])
rordlogit(50, phi = 0, a = post[1:6])
rordlogit(50, phi = post[7], a = post[1:6])
post[7]
rordlogit
rordlogit(50, phi = as.numeric(post[7]), a = post[1:6])
rordlogit(50, phi = 0, a = post[1:6])
setwd("~/R/drakeBlankTemplate")
# packages
library(drake)
source('~/R/drakeBlankTemplate/make.R', echo=TRUE)
